// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImuEncode.proto

#include "ImuEncode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ImuEncode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal_Acc_ImuEncode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ImuEncode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal_AngleRate_ImuEncode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ImuEncode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal_Angle_ImuEncode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ImuEncode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal_Quaternion_ImuEncode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ImuEncode_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImuSignal_ImuEncode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ImuEncode_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Signal_ImuEncode_2eproto;
namespace ImuTutorial {
class Signal_AccDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_Acc> _instance;
} _Signal_Acc_default_instance_;
class Signal_AngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_Angle> _instance;
} _Signal_Angle_default_instance_;
class Signal_AngleRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_AngleRate> _instance;
} _Signal_AngleRate_default_instance_;
class Signal_QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_Quaternion> _instance;
} _Signal_Quaternion_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal> _instance;
} _Signal_default_instance_;
class ImuSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuSignal> _instance;
} _ImuSignal_default_instance_;
class ImuSignalDatasetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuSignalDataset> _instance;
} _ImuSignalDataset_default_instance_;
class DatalengthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Datalength> _instance;
} _Datalength_default_instance_;
}  // namespace ImuTutorial
static void InitDefaultsSignal_Acc_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_Signal_Acc_default_instance_;
    new (ptr) ::ImuTutorial::Signal_Acc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::Signal_Acc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal_Acc_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal_Acc_ImuEncode_2eproto}, {}};

static void InitDefaultsSignal_Angle_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_Signal_Angle_default_instance_;
    new (ptr) ::ImuTutorial::Signal_Angle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::Signal_Angle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal_Angle_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal_Angle_ImuEncode_2eproto}, {}};

static void InitDefaultsSignal_AngleRate_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_Signal_AngleRate_default_instance_;
    new (ptr) ::ImuTutorial::Signal_AngleRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::Signal_AngleRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal_AngleRate_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal_AngleRate_ImuEncode_2eproto}, {}};

static void InitDefaultsSignal_Quaternion_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_Signal_Quaternion_default_instance_;
    new (ptr) ::ImuTutorial::Signal_Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::Signal_Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal_Quaternion_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal_Quaternion_ImuEncode_2eproto}, {}};

static void InitDefaultsSignal_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_Signal_default_instance_;
    new (ptr) ::ImuTutorial::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Signal_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSignal_ImuEncode_2eproto}, {
      &scc_info_Signal_Acc_ImuEncode_2eproto.base,
      &scc_info_Signal_Angle_ImuEncode_2eproto.base,
      &scc_info_Signal_AngleRate_ImuEncode_2eproto.base,
      &scc_info_Signal_Quaternion_ImuEncode_2eproto.base,}};

static void InitDefaultsImuSignal_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_ImuSignal_default_instance_;
    new (ptr) ::ImuTutorial::ImuSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::ImuSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImuSignal_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImuSignal_ImuEncode_2eproto}, {
      &scc_info_Signal_ImuEncode_2eproto.base,}};

static void InitDefaultsImuSignalDataset_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_ImuSignalDataset_default_instance_;
    new (ptr) ::ImuTutorial::ImuSignalDataset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::ImuSignalDataset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImuSignalDataset_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImuSignalDataset_ImuEncode_2eproto}, {
      &scc_info_ImuSignal_ImuEncode_2eproto.base,}};

static void InitDefaultsDatalength_ImuEncode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImuTutorial::_Datalength_default_instance_;
    new (ptr) ::ImuTutorial::Datalength();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImuTutorial::Datalength::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Datalength_ImuEncode_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDatalength_ImuEncode_2eproto}, {}};

void InitDefaults_ImuEncode_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_Acc_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_Angle_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_AngleRate_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_Quaternion_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImuSignal_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImuSignalDataset_ImuEncode_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Datalength_ImuEncode_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ImuEncode_2eproto[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ImuEncode_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ImuEncode_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ImuEncode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Acc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Acc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Acc, accx_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Acc, accy_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Acc, accz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Angle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Angle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Angle, course_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Angle, roll_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Angle, pitch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_AngleRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_AngleRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_AngleRate, course_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_AngleRate, roll_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_AngleRate, pitch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Quaternion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Quaternion, v_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal_Quaternion, z_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, leg_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, legposition_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, time_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, id_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, acc_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, angle_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, anglerate_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Signal, quaternion_),
  4,
  5,
  7,
  6,
  8,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignal, time_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignal, signal_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignalDataset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignalDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::ImuSignalDataset, imusignal_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Datalength, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Datalength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImuTutorial::Datalength, length_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ImuTutorial::Signal_Acc)},
  { 11, 19, sizeof(::ImuTutorial::Signal_Angle)},
  { 22, 30, sizeof(::ImuTutorial::Signal_AngleRate)},
  { 33, 42, sizeof(::ImuTutorial::Signal_Quaternion)},
  { 46, 60, sizeof(::ImuTutorial::Signal)},
  { 69, 76, sizeof(::ImuTutorial::ImuSignal)},
  { 78, 84, sizeof(::ImuTutorial::ImuSignalDataset)},
  { 85, 91, sizeof(::ImuTutorial::Datalength)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_Signal_Acc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_Signal_Angle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_Signal_AngleRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_Signal_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_ImuSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_ImuSignalDataset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ImuTutorial::_Datalength_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ImuEncode_2eproto = {
  {}, AddDescriptors_ImuEncode_2eproto, "ImuEncode.proto", schemas,
  file_default_instances, TableStruct_ImuEncode_2eproto::offsets,
  file_level_metadata_ImuEncode_2eproto, 8, file_level_enum_descriptors_ImuEncode_2eproto, file_level_service_descriptors_ImuEncode_2eproto,
};

const char descriptor_table_protodef_ImuEncode_2eproto[] =
  "\n\017ImuEncode.proto\022\013ImuTutorial\"\347\004\n\006Signa"
  "l\022(\n\003leg\030\001 \002(\0162\027.ImuTutorial.Signal.Leg:"
  "\002RT\022:\n\013legposition\030\002 \002(\0162\037.ImuTutorial.S"
  "ignal.LegPosition:\004Foot\022\021\n\tTimeStamp\030\003 \001"
  "(\002\022\014\n\004time\030\004 \001(\003\022\n\n\002id\030\005 \001(\005\022$\n\003acc\030\006 \002("
  "\0132\027.ImuTutorial.Signal.Acc\022(\n\005angle\030\007 \002("
  "\0132\031.ImuTutorial.Signal.Angle\0220\n\tanglerat"
  "e\030\010 \002(\0132\035.ImuTutorial.Signal.AngleRate\0222"
  "\n\nquaternion\030\t \001(\0132\036.ImuTutorial.Signal."
  "Quaternion\032/\n\003Acc\022\014\n\004AccX\030\001 \002(\002\022\014\n\004AccY\030"
  "\002 \002(\002\022\014\n\004AccZ\030\003 \002(\002\0324\n\005Angle\022\016\n\006Course\030\001"
  " \001(\002\022\014\n\004Roll\030\002 \002(\002\022\r\n\005Pitch\030\003 \002(\002\0328\n\tAng"
  "leRate\022\016\n\006Course\030\001 \002(\002\022\014\n\004Roll\030\002 \001(\002\022\r\n\005"
  "Pitch\030\003 \001(\002\0328\n\nQuaternion\022\t\n\001v\030\001 \001(\002\022\t\n\001"
  "x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\t\n\001z\030\004 \002(\002\"\025\n\003Leg\022\006\n\002"
  "RT\020\000\022\006\n\002LT\020\001\"\"\n\013LegPosition\022\010\n\004Foot\020\000\022\t\n"
  "\005Thigh\020\001\">\n\tImuSignal\022\014\n\004time\030\001 \002(\004\022#\n\006s"
  "ignal\030\002 \003(\0132\023.ImuTutorial.Signal\"=\n\020ImuS"
  "ignalDataset\022)\n\timusignal\030\001 \003(\0132\026.ImuTut"
  "orial.ImuSignal\"\034\n\nDatalength\022\016\n\006length\030"
  "\001 \002(\007"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ImuEncode_2eproto = {
  false, InitDefaults_ImuEncode_2eproto, 
  descriptor_table_protodef_ImuEncode_2eproto,
  "ImuEncode.proto", &assign_descriptors_table_ImuEncode_2eproto, 805,
};

void AddDescriptors_ImuEncode_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ImuEncode_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ImuEncode_2eproto = []() { AddDescriptors_ImuEncode_2eproto(); return true; }();
namespace ImuTutorial {
const ::google::protobuf::EnumDescriptor* Signal_Leg_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ImuEncode_2eproto);
  return file_level_enum_descriptors_ImuEncode_2eproto[0];
}
bool Signal_Leg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Leg Signal::RT;
const Signal_Leg Signal::LT;
const Signal_Leg Signal::Leg_MIN;
const Signal_Leg Signal::Leg_MAX;
const int Signal::Leg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_LegPosition_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ImuEncode_2eproto);
  return file_level_enum_descriptors_ImuEncode_2eproto[1];
}
bool Signal_LegPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_LegPosition Signal::Foot;
const Signal_LegPosition Signal::Thigh;
const Signal_LegPosition Signal::LegPosition_MIN;
const Signal_LegPosition Signal::LegPosition_MAX;
const int Signal::LegPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Signal_Acc::InitAsDefaultInstance() {
}
class Signal_Acc::HasBitSetters {
 public:
  static void set_has_accx(Signal_Acc* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_accy(Signal_Acc* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_accz(Signal_Acc* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_Acc::kAccXFieldNumber;
const int Signal_Acc::kAccYFieldNumber;
const int Signal_Acc::kAccZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_Acc::Signal_Acc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.Signal.Acc)
}
Signal_Acc::Signal_Acc(const Signal_Acc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accx_, &from.accx_,
    static_cast<size_t>(reinterpret_cast<char*>(&accz_) -
    reinterpret_cast<char*>(&accx_)) + sizeof(accz_));
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.Signal.Acc)
}

void Signal_Acc::SharedCtor() {
  ::memset(&accx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accz_) -
      reinterpret_cast<char*>(&accx_)) + sizeof(accz_));
}

Signal_Acc::~Signal_Acc() {
  // @@protoc_insertion_point(destructor:ImuTutorial.Signal.Acc)
  SharedDtor();
}

void Signal_Acc::SharedDtor() {
}

void Signal_Acc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_Acc& Signal_Acc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signal_Acc_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void Signal_Acc::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.Signal.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&accx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accz_) -
        reinterpret_cast<char*>(&accx_)) + sizeof(accz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signal_Acc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signal_Acc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float AccX = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_accx(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float AccY = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_accy(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float AccZ = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_accz(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signal_Acc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.Signal.Acc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float AccX = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_accx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float AccY = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_accy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float AccZ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_accz(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.Signal.Acc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.Signal.Acc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signal_Acc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.Signal.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float AccX = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->accx(), output);
  }

  // required float AccY = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->accy(), output);
  }

  // required float AccZ = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->accz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.Signal.Acc)
}

::google::protobuf::uint8* Signal_Acc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.Signal.Acc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float AccX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->accx(), target);
  }

  // required float AccY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->accy(), target);
  }

  // required float AccZ = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->accz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.Signal.Acc)
  return target;
}

size_t Signal_Acc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImuTutorial.Signal.Acc)
  size_t total_size = 0;

  if (has_accx()) {
    // required float AccX = 1;
    total_size += 1 + 4;
  }

  if (has_accy()) {
    // required float AccY = 2;
    total_size += 1 + 4;
  }

  if (has_accz()) {
    // required float AccZ = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Signal_Acc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.Signal.Acc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float AccX = 1;
    total_size += 1 + 4;

    // required float AccY = 2;
    total_size += 1 + 4;

    // required float AccZ = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_Acc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.Signal.Acc)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Acc* source =
      ::google::protobuf::DynamicCastToGenerated<Signal_Acc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.Signal.Acc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.Signal.Acc)
    MergeFrom(*source);
  }
}

void Signal_Acc::MergeFrom(const Signal_Acc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.Signal.Acc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      accx_ = from.accx_;
    }
    if (cached_has_bits & 0x00000002u) {
      accy_ = from.accy_;
    }
    if (cached_has_bits & 0x00000004u) {
      accz_ = from.accz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal_Acc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.Signal.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Acc::CopyFrom(const Signal_Acc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.Signal.Acc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Acc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Signal_Acc::Swap(Signal_Acc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_Acc::InternalSwap(Signal_Acc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accx_, other->accx_);
  swap(accy_, other->accy_);
  swap(accz_, other->accz_);
}

::google::protobuf::Metadata Signal_Acc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Signal_Angle::InitAsDefaultInstance() {
}
class Signal_Angle::HasBitSetters {
 public:
  static void set_has_course(Signal_Angle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roll(Signal_Angle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_pitch(Signal_Angle* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_Angle::kCourseFieldNumber;
const int Signal_Angle::kRollFieldNumber;
const int Signal_Angle::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_Angle::Signal_Angle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.Signal.Angle)
}
Signal_Angle::Signal_Angle(const Signal_Angle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&course_, &from.course_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&course_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.Signal.Angle)
}

void Signal_Angle::SharedCtor() {
  ::memset(&course_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&course_)) + sizeof(pitch_));
}

Signal_Angle::~Signal_Angle() {
  // @@protoc_insertion_point(destructor:ImuTutorial.Signal.Angle)
  SharedDtor();
}

void Signal_Angle::SharedDtor() {
}

void Signal_Angle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_Angle& Signal_Angle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signal_Angle_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void Signal_Angle::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.Signal.Angle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&course_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_) -
        reinterpret_cast<char*>(&course_)) + sizeof(pitch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signal_Angle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signal_Angle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float Course = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_course(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float Roll = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_roll(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float Pitch = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_pitch(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signal_Angle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.Signal.Angle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Course = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_course(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_roll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_pitch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.Signal.Angle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.Signal.Angle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signal_Angle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.Signal.Angle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float Course = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->course(), output);
  }

  // required float Roll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // required float Pitch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.Signal.Angle)
}

::google::protobuf::uint8* Signal_Angle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.Signal.Angle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float Course = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->course(), target);
  }

  // required float Roll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }

  // required float Pitch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.Signal.Angle)
  return target;
}

size_t Signal_Angle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImuTutorial.Signal.Angle)
  size_t total_size = 0;

  if (has_roll()) {
    // required float Roll = 2;
    total_size += 1 + 4;
  }

  if (has_pitch()) {
    // required float Pitch = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Signal_Angle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.Signal.Angle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required float Roll = 2;
    total_size += 1 + 4;

    // required float Pitch = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float Course = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_Angle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.Signal.Angle)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Angle* source =
      ::google::protobuf::DynamicCastToGenerated<Signal_Angle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.Signal.Angle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.Signal.Angle)
    MergeFrom(*source);
  }
}

void Signal_Angle::MergeFrom(const Signal_Angle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.Signal.Angle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      course_ = from.course_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitch_ = from.pitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal_Angle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.Signal.Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Angle::CopyFrom(const Signal_Angle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.Signal.Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Angle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void Signal_Angle::Swap(Signal_Angle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_Angle::InternalSwap(Signal_Angle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(course_, other->course_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
}

::google::protobuf::Metadata Signal_Angle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Signal_AngleRate::InitAsDefaultInstance() {
}
class Signal_AngleRate::HasBitSetters {
 public:
  static void set_has_course(Signal_AngleRate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roll(Signal_AngleRate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_pitch(Signal_AngleRate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_AngleRate::kCourseFieldNumber;
const int Signal_AngleRate::kRollFieldNumber;
const int Signal_AngleRate::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_AngleRate::Signal_AngleRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.Signal.AngleRate)
}
Signal_AngleRate::Signal_AngleRate(const Signal_AngleRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&course_, &from.course_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&course_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.Signal.AngleRate)
}

void Signal_AngleRate::SharedCtor() {
  ::memset(&course_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&course_)) + sizeof(pitch_));
}

Signal_AngleRate::~Signal_AngleRate() {
  // @@protoc_insertion_point(destructor:ImuTutorial.Signal.AngleRate)
  SharedDtor();
}

void Signal_AngleRate::SharedDtor() {
}

void Signal_AngleRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_AngleRate& Signal_AngleRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signal_AngleRate_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void Signal_AngleRate::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.Signal.AngleRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&course_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_) -
        reinterpret_cast<char*>(&course_)) + sizeof(pitch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signal_AngleRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signal_AngleRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float Course = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_course(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float Roll = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_roll(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float Pitch = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_pitch(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signal_AngleRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.Signal.AngleRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Course = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_course(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_roll(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_pitch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.Signal.AngleRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.Signal.AngleRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signal_AngleRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.Signal.AngleRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Course = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->course(), output);
  }

  // optional float Roll = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // optional float Pitch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.Signal.AngleRate)
}

::google::protobuf::uint8* Signal_AngleRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.Signal.AngleRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Course = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->course(), target);
  }

  // optional float Roll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }

  // optional float Pitch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.Signal.AngleRate)
  return target;
}

size_t Signal_AngleRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.Signal.AngleRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float Course = 1;
  if (has_course()) {
    total_size += 1 + 4;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional float Roll = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float Pitch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_AngleRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.Signal.AngleRate)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_AngleRate* source =
      ::google::protobuf::DynamicCastToGenerated<Signal_AngleRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.Signal.AngleRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.Signal.AngleRate)
    MergeFrom(*source);
  }
}

void Signal_AngleRate::MergeFrom(const Signal_AngleRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.Signal.AngleRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      course_ = from.course_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitch_ = from.pitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal_AngleRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.Signal.AngleRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_AngleRate::CopyFrom(const Signal_AngleRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.Signal.AngleRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_AngleRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Signal_AngleRate::Swap(Signal_AngleRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_AngleRate::InternalSwap(Signal_AngleRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(course_, other->course_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
}

::google::protobuf::Metadata Signal_AngleRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Signal_Quaternion::InitAsDefaultInstance() {
}
class Signal_Quaternion::HasBitSetters {
 public:
  static void set_has_v(Signal_Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_x(Signal_Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y(Signal_Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_z(Signal_Quaternion* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_Quaternion::kVFieldNumber;
const int Signal_Quaternion::kXFieldNumber;
const int Signal_Quaternion::kYFieldNumber;
const int Signal_Quaternion::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_Quaternion::Signal_Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.Signal.Quaternion)
}
Signal_Quaternion::Signal_Quaternion(const Signal_Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&v_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.Signal.Quaternion)
}

void Signal_Quaternion::SharedCtor() {
  ::memset(&v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&v_)) + sizeof(z_));
}

Signal_Quaternion::~Signal_Quaternion() {
  // @@protoc_insertion_point(destructor:ImuTutorial.Signal.Quaternion)
  SharedDtor();
}

void Signal_Quaternion::SharedDtor() {
}

void Signal_Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_Quaternion& Signal_Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signal_Quaternion_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void Signal_Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.Signal.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&v_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signal_Quaternion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signal_Quaternion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float v = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_v(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float z = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signal_Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.Signal.Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float v = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_v(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.Signal.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.Signal.Quaternion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signal_Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.Signal.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float v = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->v(), output);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.Signal.Quaternion)
}

::google::protobuf::uint8* Signal_Quaternion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.Signal.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float v = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->v(), target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.Signal.Quaternion)
  return target;
}

size_t Signal_Quaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImuTutorial.Signal.Quaternion)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Signal_Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.Signal.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required float z = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float v = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.Signal.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Quaternion* source =
      ::google::protobuf::DynamicCastToGenerated<Signal_Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.Signal.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.Signal.Quaternion)
    MergeFrom(*source);
  }
}

void Signal_Quaternion::MergeFrom(const Signal_Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.Signal.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal_Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.Signal.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Quaternion::CopyFrom(const Signal_Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.Signal.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Quaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void Signal_Quaternion::Swap(Signal_Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_Quaternion::InternalSwap(Signal_Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(v_, other->v_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Signal_Quaternion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::ImuTutorial::_Signal_default_instance_._instance.get_mutable()->acc_ = const_cast< ::ImuTutorial::Signal_Acc*>(
      ::ImuTutorial::Signal_Acc::internal_default_instance());
  ::ImuTutorial::_Signal_default_instance_._instance.get_mutable()->angle_ = const_cast< ::ImuTutorial::Signal_Angle*>(
      ::ImuTutorial::Signal_Angle::internal_default_instance());
  ::ImuTutorial::_Signal_default_instance_._instance.get_mutable()->anglerate_ = const_cast< ::ImuTutorial::Signal_AngleRate*>(
      ::ImuTutorial::Signal_AngleRate::internal_default_instance());
  ::ImuTutorial::_Signal_default_instance_._instance.get_mutable()->quaternion_ = const_cast< ::ImuTutorial::Signal_Quaternion*>(
      ::ImuTutorial::Signal_Quaternion::internal_default_instance());
}
class Signal::HasBitSetters {
 public:
  static void set_has_leg(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_legposition(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_timestamp(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_time(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_id(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::ImuTutorial::Signal_Acc& acc(const Signal* msg);
  static void set_has_acc(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::ImuTutorial::Signal_Angle& angle(const Signal* msg);
  static void set_has_angle(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ImuTutorial::Signal_AngleRate& anglerate(const Signal* msg);
  static void set_has_anglerate(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::ImuTutorial::Signal_Quaternion& quaternion(const Signal* msg);
  static void set_has_quaternion(Signal* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::ImuTutorial::Signal_Acc&
Signal::HasBitSetters::acc(const Signal* msg) {
  return *msg->acc_;
}
const ::ImuTutorial::Signal_Angle&
Signal::HasBitSetters::angle(const Signal* msg) {
  return *msg->angle_;
}
const ::ImuTutorial::Signal_AngleRate&
Signal::HasBitSetters::anglerate(const Signal* msg) {
  return *msg->anglerate_;
}
const ::ImuTutorial::Signal_Quaternion&
Signal::HasBitSetters::quaternion(const Signal* msg) {
  return *msg->quaternion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kLegFieldNumber;
const int Signal::kLegpositionFieldNumber;
const int Signal::kTimeStampFieldNumber;
const int Signal::kTimeFieldNumber;
const int Signal::kIdFieldNumber;
const int Signal::kAccFieldNumber;
const int Signal::kAngleFieldNumber;
const int Signal::kAnglerateFieldNumber;
const int Signal::kQuaternionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_acc()) {
    acc_ = new ::ImuTutorial::Signal_Acc(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from.has_angle()) {
    angle_ = new ::ImuTutorial::Signal_Angle(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  if (from.has_anglerate()) {
    anglerate_ = new ::ImuTutorial::Signal_AngleRate(*from.anglerate_);
  } else {
    anglerate_ = nullptr;
  }
  if (from.has_quaternion()) {
    quaternion_ = new ::ImuTutorial::Signal_Quaternion(*from.quaternion_);
  } else {
    quaternion_ = nullptr;
  }
  ::memcpy(&leg_, &from.leg_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&leg_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.Signal)
}

void Signal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Signal_ImuEncode_2eproto.base);
  ::memset(&acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&acc_)) + sizeof(id_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:ImuTutorial.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete anglerate_;
  if (this != internal_default_instance()) delete quaternion_;
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signal_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(acc_ != nullptr);
      acc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angle_ != nullptr);
      angle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(anglerate_ != nullptr);
      anglerate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(quaternion_ != nullptr);
      quaternion_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&leg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&leg_)) + sizeof(timestamp_));
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ImuTutorial.Signal.Leg leg = 1 [default = RT];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ImuTutorial::Signal_Leg_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_leg(static_cast<::ImuTutorial::Signal_Leg>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ImuTutorial.Signal.LegPosition legposition = 2 [default = Foot];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ImuTutorial::Signal_LegPosition_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_legposition(static_cast<::ImuTutorial::Signal_LegPosition>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float TimeStamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int64 time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ImuTutorial.Signal.Acc acc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ImuTutorial::Signal_Acc::_InternalParse;
        object = msg->mutable_acc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required .ImuTutorial.Signal.Angle angle = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ImuTutorial::Signal_Angle::_InternalParse;
        object = msg->mutable_angle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required .ImuTutorial.Signal.AngleRate anglerate = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ImuTutorial::Signal_AngleRate::_InternalParse;
        object = msg->mutable_anglerate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ImuTutorial.Signal.Quaternion quaternion = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ImuTutorial::Signal_Quaternion::_InternalParse;
        object = msg->mutable_quaternion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ImuTutorial.Signal.Leg leg = 1 [default = RT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ImuTutorial::Signal_Leg_IsValid(value)) {
            set_leg(static_cast< ::ImuTutorial::Signal_Leg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ImuTutorial.Signal.LegPosition legposition = 2 [default = Foot];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ImuTutorial::Signal_LegPosition_IsValid(value)) {
            set_legposition(static_cast< ::ImuTutorial::Signal_LegPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float TimeStamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ImuTutorial.Signal.Acc acc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ImuTutorial.Signal.Angle angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ImuTutorial.Signal.AngleRate anglerate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_anglerate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ImuTutorial.Signal.Quaternion quaternion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.Signal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ImuTutorial.Signal.Leg leg = 1 [default = RT];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->leg(), output);
  }

  // required .ImuTutorial.Signal.LegPosition legposition = 2 [default = Foot];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->legposition(), output);
  }

  // optional float TimeStamp = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->timestamp(), output);
  }

  // optional int64 time = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional int32 id = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  // required .ImuTutorial.Signal.Acc acc = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::acc(this), output);
  }

  // required .ImuTutorial.Signal.Angle angle = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::angle(this), output);
  }

  // required .ImuTutorial.Signal.AngleRate anglerate = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::anglerate(this), output);
  }

  // optional .ImuTutorial.Signal.Quaternion quaternion = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::quaternion(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ImuTutorial.Signal.Leg leg = 1 [default = RT];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->leg(), target);
  }

  // required .ImuTutorial.Signal.LegPosition legposition = 2 [default = Foot];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->legposition(), target);
  }

  // optional float TimeStamp = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->timestamp(), target);
  }

  // optional int64 time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional int32 id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  // required .ImuTutorial.Signal.Acc acc = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::acc(this), target);
  }

  // required .ImuTutorial.Signal.Angle angle = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::angle(this), target);
  }

  // required .ImuTutorial.Signal.AngleRate anglerate = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::anglerate(this), target);
  }

  // optional .ImuTutorial.Signal.Quaternion quaternion = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::quaternion(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.Signal)
  return target;
}

size_t Signal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImuTutorial.Signal)
  size_t total_size = 0;

  if (has_acc()) {
    // required .ImuTutorial.Signal.Acc acc = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  if (has_angle()) {
    // required .ImuTutorial.Signal.Angle angle = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angle_);
  }

  if (has_anglerate()) {
    // required .ImuTutorial.Signal.AngleRate anglerate = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *anglerate_);
  }

  if (has_leg()) {
    // required .ImuTutorial.Signal.Leg leg = 1 [default = RT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg());
  }

  if (has_legposition()) {
    // required .ImuTutorial.Signal.LegPosition legposition = 2 [default = Foot];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->legposition());
  }

  return total_size;
}
size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required .ImuTutorial.Signal.Acc acc = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acc_);

    // required .ImuTutorial.Signal.Angle angle = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angle_);

    // required .ImuTutorial.Signal.AngleRate anglerate = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *anglerate_);

    // required .ImuTutorial.Signal.Leg leg = 1 [default = RT];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg());

    // required .ImuTutorial.Signal.LegPosition legposition = 2 [default = Foot];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->legposition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ImuTutorial.Signal.Quaternion quaternion = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quaternion_);
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional int64 time = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional float TimeStamp = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional int32 id = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_acc()->::ImuTutorial::Signal_Acc::MergeFrom(from.acc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angle()->::ImuTutorial::Signal_Angle::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_anglerate()->::ImuTutorial::Signal_AngleRate::MergeFrom(from.anglerate());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_quaternion()->::ImuTutorial::Signal_Quaternion::MergeFrom(from.quaternion());
    }
    if (cached_has_bits & 0x00000010u) {
      leg_ = from.leg_;
    }
    if (cached_has_bits & 0x00000020u) {
      legposition_ = from.legposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_id(from.id());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  if (has_acc()) {
    if (!this->acc_->IsInitialized()) return false;
  }
  if (has_angle()) {
    if (!this->angle_->IsInitialized()) return false;
  }
  if (has_anglerate()) {
    if (!this->anglerate_->IsInitialized()) return false;
  }
  if (has_quaternion()) {
    if (!this->quaternion_->IsInitialized()) return false;
  }
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(acc_, other->acc_);
  swap(angle_, other->angle_);
  swap(anglerate_, other->anglerate_);
  swap(quaternion_, other->quaternion_);
  swap(leg_, other->leg_);
  swap(legposition_, other->legposition_);
  swap(time_, other->time_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ImuSignal::InitAsDefaultInstance() {
}
class ImuSignal::HasBitSetters {
 public:
  static void set_has_time(ImuSignal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuSignal::kTimeFieldNumber;
const int ImuSignal::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuSignal::ImuSignal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.ImuSignal)
}
ImuSignal::ImuSignal(const ImuSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.ImuSignal)
}

void ImuSignal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImuSignal_ImuEncode_2eproto.base);
  time_ = PROTOBUF_ULONGLONG(0);
}

ImuSignal::~ImuSignal() {
  // @@protoc_insertion_point(destructor:ImuTutorial.ImuSignal)
  SharedDtor();
}

void ImuSignal::SharedDtor() {
}

void ImuSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuSignal& ImuSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImuSignal_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void ImuSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.ImuSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_.Clear();
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImuSignal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImuSignal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ImuTutorial.Signal signal = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ImuTutorial::Signal::_InternalParse;
          object = msg->add_signal();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImuSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.ImuSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ImuTutorial.Signal signal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.ImuSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.ImuSignal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImuSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.ImuSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // repeated .ImuTutorial.Signal signal = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->signal(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.ImuSignal)
}

::google::protobuf::uint8* ImuSignal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.ImuSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // repeated .ImuTutorial.Signal signal = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->signal(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.ImuSignal)
  return target;
}

size_t ImuSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.ImuSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 time = 1;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImuTutorial.Signal signal = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.ImuSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuSignal* source =
      ::google::protobuf::DynamicCastToGenerated<ImuSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.ImuSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.ImuSignal)
    MergeFrom(*source);
  }
}

void ImuSignal::MergeFrom(const ImuSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.ImuSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
  if (from.has_time()) {
    set_time(from.time());
  }
}

void ImuSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.ImuSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuSignal::CopyFrom(const ImuSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.ImuSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signal())) return false;
  return true;
}

void ImuSignal::Swap(ImuSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuSignal::InternalSwap(ImuSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&signal_)->InternalSwap(CastToBase(&other->signal_));
  swap(time_, other->time_);
}

::google::protobuf::Metadata ImuSignal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ImuSignalDataset::InitAsDefaultInstance() {
}
class ImuSignalDataset::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuSignalDataset::kImusignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuSignalDataset::ImuSignalDataset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.ImuSignalDataset)
}
ImuSignalDataset::ImuSignalDataset(const ImuSignalDataset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      imusignal_(from.imusignal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.ImuSignalDataset)
}

void ImuSignalDataset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImuSignalDataset_ImuEncode_2eproto.base);
}

ImuSignalDataset::~ImuSignalDataset() {
  // @@protoc_insertion_point(destructor:ImuTutorial.ImuSignalDataset)
  SharedDtor();
}

void ImuSignalDataset::SharedDtor() {
}

void ImuSignalDataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuSignalDataset& ImuSignalDataset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImuSignalDataset_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void ImuSignalDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.ImuSignalDataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imusignal_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImuSignalDataset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImuSignalDataset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ImuTutorial.ImuSignal imusignal = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ImuTutorial::ImuSignal::_InternalParse;
          object = msg->add_imusignal();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImuSignalDataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.ImuSignalDataset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ImuTutorial.ImuSignal imusignal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_imusignal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.ImuSignalDataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.ImuSignalDataset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImuSignalDataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.ImuSignalDataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImuTutorial.ImuSignal imusignal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imusignal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->imusignal(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.ImuSignalDataset)
}

::google::protobuf::uint8* ImuSignalDataset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.ImuSignalDataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImuTutorial.ImuSignal imusignal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imusignal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->imusignal(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.ImuSignalDataset)
  return target;
}

size_t ImuSignalDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.ImuSignalDataset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImuTutorial.ImuSignal imusignal = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->imusignal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->imusignal(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuSignalDataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.ImuSignalDataset)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuSignalDataset* source =
      ::google::protobuf::DynamicCastToGenerated<ImuSignalDataset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.ImuSignalDataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.ImuSignalDataset)
    MergeFrom(*source);
  }
}

void ImuSignalDataset::MergeFrom(const ImuSignalDataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.ImuSignalDataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imusignal_.MergeFrom(from.imusignal_);
}

void ImuSignalDataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.ImuSignalDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuSignalDataset::CopyFrom(const ImuSignalDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.ImuSignalDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuSignalDataset::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->imusignal())) return false;
  return true;
}

void ImuSignalDataset::Swap(ImuSignalDataset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuSignalDataset::InternalSwap(ImuSignalDataset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&imusignal_)->InternalSwap(CastToBase(&other->imusignal_));
}

::google::protobuf::Metadata ImuSignalDataset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Datalength::InitAsDefaultInstance() {
}
class Datalength::HasBitSetters {
 public:
  static void set_has_length(Datalength* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datalength::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datalength::Datalength()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImuTutorial.Datalength)
}
Datalength::Datalength(const Datalength& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:ImuTutorial.Datalength)
}

void Datalength::SharedCtor() {
  length_ = 0u;
}

Datalength::~Datalength() {
  // @@protoc_insertion_point(destructor:ImuTutorial.Datalength)
  SharedDtor();
}

void Datalength::SharedDtor() {
}

void Datalength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Datalength& Datalength::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Datalength_ImuEncode_2eproto.base);
  return *internal_default_instance();
}


void Datalength::Clear() {
// @@protoc_insertion_point(message_clear_start:ImuTutorial.Datalength)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Datalength::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Datalength*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required fixed32 length = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_length(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Datalength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImuTutorial.Datalength)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImuTutorial.Datalength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImuTutorial.Datalength)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Datalength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImuTutorial.Datalength)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImuTutorial.Datalength)
}

::google::protobuf::uint8* Datalength::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImuTutorial.Datalength)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImuTutorial.Datalength)
  return target;
}

size_t Datalength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImuTutorial.Datalength)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required fixed32 length = 1;
  if (has_length()) {
    total_size += 1 + 4;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Datalength::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImuTutorial.Datalength)
  GOOGLE_DCHECK_NE(&from, this);
  const Datalength* source =
      ::google::protobuf::DynamicCastToGenerated<Datalength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImuTutorial.Datalength)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImuTutorial.Datalength)
    MergeFrom(*source);
  }
}

void Datalength::MergeFrom(const Datalength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImuTutorial.Datalength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_length()) {
    set_length(from.length());
  }
}

void Datalength::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImuTutorial.Datalength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datalength::CopyFrom(const Datalength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImuTutorial.Datalength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datalength::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Datalength::Swap(Datalength* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datalength::InternalSwap(Datalength* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(length_, other->length_);
}

::google::protobuf::Metadata Datalength::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ImuEncode_2eproto);
  return ::file_level_metadata_ImuEncode_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ImuTutorial
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ImuTutorial::Signal_Acc* Arena::CreateMaybeMessage< ::ImuTutorial::Signal_Acc >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::Signal_Acc >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::Signal_Angle* Arena::CreateMaybeMessage< ::ImuTutorial::Signal_Angle >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::Signal_Angle >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::Signal_AngleRate* Arena::CreateMaybeMessage< ::ImuTutorial::Signal_AngleRate >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::Signal_AngleRate >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::Signal_Quaternion* Arena::CreateMaybeMessage< ::ImuTutorial::Signal_Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::Signal_Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::Signal* Arena::CreateMaybeMessage< ::ImuTutorial::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::Signal >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::ImuSignal* Arena::CreateMaybeMessage< ::ImuTutorial::ImuSignal >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::ImuSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::ImuSignalDataset* Arena::CreateMaybeMessage< ::ImuTutorial::ImuSignalDataset >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::ImuSignalDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::ImuTutorial::Datalength* Arena::CreateMaybeMessage< ::ImuTutorial::Datalength >(Arena* arena) {
  return Arena::CreateInternal< ::ImuTutorial::Datalength >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
